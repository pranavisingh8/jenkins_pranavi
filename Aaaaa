#DFS: https://chatgpt.com/share/6807f12a-50d8-8004-8e8e-6a10f4280404

#BFS:
import networkx as nx
import matplotlib.pyplot as plt
from collections import deque

class Graph:
    def __init__(self):
        self.edges = []        # For visualization
        self.adj = {}          # Adjacency list

    def add_edge(self, u, v):
        self.edges.append((u, v))
        if u not in self.adj:
            self.adj[u] = []
        if v not in self.adj:
            self.adj[v] = []
        self.adj[u].append(v)
        self.adj[v].append(u)

    def visualize(self):
        g = nx.Graph()
        g.add_edges_from(self.edges)
        nx.draw_networkx(g)
        plt.title("Original Graph")
        plt.show()

    def bfs(self, start):
        queue = deque([start])
        visited = set()
        traversal = []
        parent = {start: None}

        while queue:
            node = queue.popleft()
            if node not in visited:
                visited.add(node)
                traversal.append(node)
                for neighbor in self.adj[node]:
                    if neighbor not in visited and neighbor not in queue:
                        queue.append(neighbor)
                        parent[neighbor] = node

        print("BFS Traversal:", traversal)
        self.visualize_tree(parent)

    def visualize_tree(self, parent):
        tree_edges = [(parent[n], n) for n in parent if parent[n] is not None]
        tree = nx.Graph()
        tree.add_edges_from(tree_edges)
        nx.draw_networkx(tree)
        plt.title("BFS Tree")
        plt.show()

# Example usage
G = Graph()
edges = [(0, 2), (1, 2), (1, 3), (1, 4), (3, 4), (5, 7), (2, 7),
         (3, 6), (6, 7), (8, 4), (10, 4), (8, 5), (9, 7), (10, 7), (0, 9)]

for u, v in edges:
    G.add_edge(u, v)

G.visualize()
G.bfs(0)

#Best FS:
